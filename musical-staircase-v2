
// We need to initalize a few of the pins from our Arduino. 
int lightPin1 = 0;  // Analog 0 from the output of multiplexer #1.
int lightPin2 = 1;  // Analog 1 from the output of multiplexer #2.
int control0 = 6;  // Selector channel 0 (S0)
int control1 = 7;  // Selector channel 1 (S1)
int control2 = 8;  // Selector channel 2 (S2)

int chord[] = {0X30, 0X32, 0X34, 0X35, 0X37, 0X39, 0X3B, 0X3C, 0X3E, 0X40, 0X41, 0X43, 0X45, 0X47, 0X48, 0X4A};

// WAVESHIELD STUFF
void setup()
{ 
  Serial.begin(31250);  // Begin serial communication. This describes with what frequency the Arduino
                       // communicates with the computer (where the serial monitor is viewed).
  pinMode(control0, OUTPUT);   // This makes the control pins outputs.
  pinMode(control1, OUTPUT);
  pinMode(control2, OUTPUT);
  pinMode(lightPin1, INPUT);
  pinMode(lightPin2, INPUT);
}
//16,7,
// HELPER FUNCTION
//  plays a MIDI note. 
void noteOn(int cmd, int pitch, int velocity) {
  Serial.write(cmd);
  Serial.write(pitch);
  Serial.write(velocity);
}

void checkSwitch (int notea, int noteb) {
  int sensorValuea = analogRead(lightPin1);
  int sensorValueb = analogRead(lightPin2);  // read the current output from the first phototransistor. 
  if (sensorValuea < 10) { noteOn(0x90, notea, 0x45);}
  else { noteOn(0x90, notea, 0x00); } 
  if (sensorValueb < 10) { noteOn(0x90, noteb, 0x45);}
  else { noteOn(0x90, noteb, 0x00); };
}
// Finally the important loop where we register whether or not any of the phototransistors are being covered up or not.
void loop() {
  
for (int i = 0; i < 16; i++) { noteOn(0X90, chord[i], 0X00); }
  
  
  // STAIR 1                           
  digitalWrite(control0, LOW);
  digitalWrite(control1, LOW);
  digitalWrite(control2, LOW);
  
  checkSwitch(chord[15], chord[7]);
  
//
  // STAIR 2
  digitalWrite(control0, LOW);
  digitalWrite(control1, LOW);
  digitalWrite(control2, HIGH);

  checkSwitch(chord[14], chord[6]);

  // STAIR 3 
  digitalWrite(control0, LOW);
  digitalWrite(control1, HIGH);
  digitalWrite(control2, LOW);

  checkSwitch(chord[13], chord[5]);
  
  // STAIR 4
  digitalWrite(control0, LOW);
  digitalWrite(control1, HIGH);
  digitalWrite(control2, HIGH);

  checkSwitch(chord[12], chord[4]);

  // STAIR 5
  digitalWrite(control0, HIGH);
  digitalWrite(control1, LOW);
  digitalWrite(control2, LOW);

  checkSwitch(chord[11], chord[3]);

  // STAIR 6
  digitalWrite(control0, HIGH);
  digitalWrite(control1, LOW);
  digitalWrite(control2, HIGH);

  checkSwitch(chord[10], chord[2]);
  
  // STAIR 7
  digitalWrite(control0, HIGH);
  digitalWrite(control1, HIGH);
  digitalWrite(control2, LOW);

  checkSwitch(chord[9], chord[1]);
 
  // STAIR 8
  digitalWrite(control0, HIGH);
  digitalWrite(control1, HIGH);
  digitalWrite(control2, HIGH);

  checkSwitch(chord[8], chord[0]);

}

